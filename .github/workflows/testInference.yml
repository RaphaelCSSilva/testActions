name: Friendly AI reply to comments (MCP always on, minimal scopes)

on:
  issue_comment:
    types: [created]

permissions:
  contents: read
  issues: write
  pull-requests: write
  models: read

jobs:
  reply:
    if: ${{ github.actor != 'github-actions[bot]' }}
    runs-on: ubuntu-latest

    steps:
      - name: Prepare tiny prompt input
        run: |
          mkdir -p .github/prompts
          cat > .github/prompts/system.txt <<'SYS'
          Reply in â‰¤40 words. Output ONLY the reply text.
          SYS
                    # Trim comment to leave headroom under GitHub Models' ~8k input cap
                    printf "%s" "${{ github.event.comment.body }}" | head -c 800 > .github/prompts/comment.txt
                    cat > .github/prompts/reply.prompt.yml <<'PR'
          messages:
            - role: system
              content: "{{system}}"
            - role: user
              content: |
                Comment by @{{author}} on "{{title}}":
                ---
                {{comment}}
                ---
                Repo: {{repo}}
          model: openai/gpt-4o-mini
          PR

      - name: Draft reply (MCP enabled, minimal PAT)
        id: ai
        uses: actions/ai-inference@v2
        env:
          # Ask server to keep catalog small (hosted server may only partially honor these)
          GITHUB_TOOLSETS: repos,gists
          GITHUB_DYNAMIC_TOOLSETS: 1
          # While testing, you can force read-only surfaces server-side if supported:
          GITHUB_READ_ONLY: 1
        with:
          enable-github-mcp: true
          # Normal inference token (GITHUB_TOKEN OK)
          token: ${{ secrets.GITHUB_TOKEN }}
          # IMPORTANT: use a *minimal-scope* fine-grained PAT here:
          #  - Repository: Contents (Read & write) for this repo only
          #  - Account: Gists (Read & write)
          github-mcp-token: ${{ secrets.GH_MCP_PAT_MIN }}
          max-tokens: 80
          system-prompt-file: .github/prompts/system.txt
          prompt-file: .github/prompts/reply.prompt.yml
          input: |
            author: ${{ github.event.comment.user.login }}
            title: ${{ github.event.issue.title }}
            repo: ${{ github.repository }}
            system: ./.github/prompts/system.txt
          file_input: |
            comment: .github/prompts/comment.txt

      - name: Post reply
        uses: actions/github-script@v7
        with:
          script: |
            const issue_number = context.payload.issue.number;
            const reply = ${{ toJSON(steps.ai.outputs.response) }};
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number,
              body: reply
            });
