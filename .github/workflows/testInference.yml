name: Sentiment reply to issue comments

on:
  issue_comment:
    types: [created]

permissions:
  contents: read
  issues: write         # needed to post a comment on Issues
  pull-requests: write  # needed to post a comment on PRs
  models: read          # required by actions/ai-inference

jobs:
  respond:
    if: ${{ github.actor != 'github-actions[bot]' }} # avoid loops
    runs-on: ubuntu-latest

    steps:
      - name: Analyze sentiment with GitHub Models
        id: ai
        uses: actions/ai-inference@v2
        with:
          # Optional: pin a model (default is openai/gpt-4o)
          # model: openai/gpt-4o-mini
          system-prompt: >
            You are a precise sentiment analyst and helpful maintainer assistant.
            Read the user's comment and do two things:
            1) Classify sentiment as one of: positive | neutral | negative.
            2) Write a brief, friendly, project-appropriate reply (max 60 words)
               that acknowledges their tone and moves the conversation forward.
            Output EXACTLY this JSON:
            {"sentiment":"<positive|neutral|negative>", "reply":"<one short reply>"}
          prompt: |
            The comment text is:
            ---
            ${{ github.event.comment.body }}
            ---
            Context:
            - Issue/PR title: "${{ github.event.issue.title }}"
            - Author: "${{ github.event.comment.user.login }}"
            - Repo: "${{ github.repository }}"
            Remember: JSON only, no markdown, no extra text.
          max-tokens: 250

      - name: Parse AI response (from action-provided file)
        id: parse
        shell: bash
        run: |
          set -euo pipefail
          # Validate and normalize the JSON using jq
          jq -e . '${{ steps.ai.outputs.response-file }}' > ai.json

          sentiment=$(jq -r '.sentiment // "neutral"' ai.json)
          reply=$(jq -r '.reply // ""' ai.json)

          {
            echo "sentiment=$sentiment"
            echo "reply<<EOF"
            echo "$reply"
            echo "EOF"
          } >> "$GITHUB_OUTPUT"

      - name: Post reply
        uses: actions/github-script@v7
        with:
          script: |
            const issue_number = context.payload.issue.number;
            // reply may include newlines; use toJSON to keep formatting safe
            const sentiment = `${{ toJSON(steps.parse.outputs.sentiment) }}`;
            const reply = ${{ toJSON(steps.parse.outputs.reply) }};
            const body = `**Sentiment:** \`${sentiment}\`\n\n${reply}`;
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number,
              body
            });
